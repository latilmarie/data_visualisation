# lab <- ifelse(input$data_type == "Childlessness", "age group", "indicator")
#  choice_third <- as.list(unique(df$Indicator[df$DataType == input$data_type & df$Period == input$period]))
# selectInput(inputId = "indicator", choices = choice_third,
#            label = paste0("Choose the type of ", lab, " you want to explore:"))
# })
}
# Finally, we can run our app by either clicking "Run App" in the top of our RStudio IDE, or by running
shinyApp(ui = ui, server = server)
library(tidyverse)
library(maps)
library(ggplot2)
library(reshape2)
data <- read.csv("Forest_and_Carbon.csv")
# data for maps------------------------------------------
data_maps <- data[, -c(1:1)]
data_maps <- data_maps[, -c(2:2)]
data_maps <- data_maps[, -c(4:36)]
data_maps$Value2020 <- data_maps$F2020
data_maps$F2020 <- NULL
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
world_data["ISO3"] <- data_maps$ISO3[match(world_data$region, data_maps$Country)]
df <- rbind(data_maps)
worldMaps <- function(df, world_data, indicator){
# Function for setting the aesthetics of the plot
my_theme <- function () {
theme_bw() + theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
strip.text = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
# Select only the data that the user has selected to view
plotdf <- df[df$Indicator == indicator,]
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Add the data the user wants to see to the geographical world data
world_data['Indicator'] <- rep(indicator, nrow(world_data))
world_data['Value'] <- plotdf$Value[match(world_data$ISO3, plotdf$ISO3)]
# Create caption with the data source to show underneath the map
capt <- paste0("Source: ", ifelse(data_type == "Childlessness", "United Nations" , "World Bank"))
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = world_data, color = 'gray70', size = 0.1,
aes(x = long, y = lat, fill = Value, group = group,
tooltip = sprintf("%s<br/>%s", ISO3, Value))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
scale_y_continuous(limits = c(-60, 90), breaks = c()) +
scale_x_continuous(breaks = c()) +
labs(fill = data_type, color = data_type, title = NULL, x = NULL, y = NULL, caption = capt) +
my_theme()
return(g)
}
library(shiny)
library(ggiraph)
# Define the UI
ui = fluidPage(
# App title
titlePanel("Childlessness and Gender Gap Index Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "indicator",
label = "Choose the type of data you want to see:",
choices = list("Carbon stocks in forests" = "Carbon stocks in forests", "Forest area" = "Forest area")),
# Second input (choices depend on the choice for the first input)
#uiOutput("secondSelection"),
# Third input (choices depend on the choice for the first and second input)
#uiOutput("thirdSelection")
),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
girafeOutput("distPlot")
)
)
)
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$indicator)))
})
# Change the choices for the second selection on the basis of the input to the first selection
#  output$secondSelection <- renderUI({
#   choice_second <- as.list(unique(df$Period[which(df$DataType == input$data_type)]))
#  selectInput(inputId = "period", choices = choice_second,
#             label = "Choose the period for which you want to see the data:")
#})
# Change the choices for the third selection on the basis of the input to the first and second selections
#output$thirdSelection <- renderUI({
# lab <- ifelse(input$data_type == "Childlessness", "age group", "indicator")
#  choice_third <- as.list(unique(df$Indicator[df$DataType == input$data_type & df$Period == input$period]))
# selectInput(inputId = "indicator", choices = choice_third,
#            label = paste0("Choose the type of ", lab, " you want to explore:"))
# })
}
# Finally, we can run our app by either clicking "Run App" in the top of our RStudio IDE, or by running
shinyApp(ui = ui, server = server)
View(data_maps)
data_maps$data_type <- data_maps$Indicator
View(data_maps)
data_maps$Indicator <- NULL
data <- read.csv("Forest_and_Carbon.csv")
data_maps <- data[, -c(1:1)]
data_maps <- data_maps[, -c(2:2)]
data_maps <- data_maps[, -c(4:36)]
data_maps$Value2020 <- data_maps$F2020
data_maps$F2020 <- NULL
data_maps$DataType <- data_maps$Indicator
data_maps$Indicator <- NULL
View(data_maps)
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
world_data["ISO3"] <- data_maps$ISO3[match(world_data$region, data_maps$Country)]
df <- rbind(data_maps)
library(tidyverse)
library(maps)
library(ggplot2)
library(reshape2)
data <- read.csv("Forest_and_Carbon.csv")
# data for maps------------------------------------------
data_maps <- data[, -c(1:1)]
data_maps <- data_maps[, -c(2:2)]
data_maps <- data_maps[, -c(4:36)]
data_maps$Value2020 <- data_maps$F2020
data_maps$F2020 <- NULL
data_maps$DataType <- data_maps$Indicator
data_maps$Indicator <- NULL
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
world_data["ISO3"] <- data_maps$ISO3[match(world_data$region, data_maps$Country)]
df <- rbind(data_maps)
worldMaps <- function(df, world_data, data_type){
# Function for setting the aesthetics of the plot
my_theme <- function () {
theme_bw() + theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
strip.text = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
# Select only the data that the user has selected to view
plotdf <- df[ df$DataType == data_type,]
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Add the data the user wants to see to the geographical world data
world_data['DataType'] <- rep(data_type, nrow(world_data))
world_data['Value2020'] <- plotdf$Value2020[match(world_data$ISO3, plotdf$ISO3)]
# Create caption with the data source to show underneath the map
capt <- paste0("Source: ", ifelse(data_type == "Carbon stocks in forests", "United Nations" , "World Bank"))
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = world_data, color = 'gray70', size = 0.1,
aes(x = long, y = lat, fill = Value, group = group,
tooltip = sprintf("%s<br/>%s", ISO3, Value))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
scale_y_continuous(limits = c(-60, 90), breaks = c()) +
scale_x_continuous(breaks = c()) +
labs(fill = data_type, color = data_type, title = NULL, x = NULL, y = NULL, caption = capt) +
my_theme()
return(g)
}
library(shiny)
library(ggiraph)
# Define the UI
ui = fluidPage(
# App title
titlePanel("Childlessness and Gender Gap Index Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of data you want to see:",
choices = list("Carbon stocks in forests" = "Carbon stocks in forests")),
),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
girafeOutput("distPlot")
)
)
)
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type)))
})
}
# Finally, we can run our app by either clicking "Run App" in the top of our RStudio IDE, or by running
shinyApp(ui = ui, server = server)
library(tidyverse)
library(maps)
library(ggplot2)
library(reshape2)
data <- read.csv("Forest_and_Carbon.csv")
# data for maps------------------------------------------
data_maps <- data[, -c(1:1)]
data_maps <- data_maps[, -c(2:2)]
data_maps <- data_maps[, -c(4:36)]
data_maps$Value2020 <- data_maps$F2020
data_maps$F2020 <- NULL
data_maps$DataType <- data_maps$Indicator
data_maps$Indicator <- NULL
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
world_data["ISO3"] <- data_maps$ISO3[match(world_data$region, data_maps$Country)]
df <- rbind(data_maps)
worldMaps <- function(df, world_data, data_type){
# Function for setting the aesthetics of the plot
my_theme <- function () {
theme_bw() + theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
strip.text = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
# Select only the data that the user has selected to view
plotdf <- df[ df$DataType == data_type,]
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Add the data the user wants to see to the geographical world data
world_data['DataType'] <- rep(data_type, nrow(world_data))
world_data['Value2020'] <- plotdf$Value2020[match(world_data$ISO3, plotdf$ISO3)]
# Create caption with the data source to show underneath the map
capt <- paste0("Source: ", ifelse(data_type == "Carbon stocks in forests", "United Nations" , "World Bank"))
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = world_data, color = 'gray70', size = 0.1,
aes(x = long, y = lat, fill = Value2020, group = group,
tooltip = sprintf("%s<br/>%s", ISO3, Value2020))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
scale_y_continuous(limits = c(-60, 90), breaks = c()) +
scale_x_continuous(breaks = c()) +
labs(fill = data_type, color = data_type, title = NULL, x = NULL, y = NULL, caption = capt) +
my_theme()
return(g)
}
library(shiny)
library(ggiraph)
# Define the UI
ui = fluidPage(
# App title
titlePanel("Childlessness and Gender Gap Index Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of data you want to see:",
choices = list("Carbon stocks in forests" = "Carbon stocks in forests")),
),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
girafeOutput("distPlot")
)
)
)
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type)))
})
}
# Finally, we can run our app by either clicking "Run App" in the top of our RStudio IDE, or by running
shinyApp(ui = ui, server = server)
library(tidyverse)
library(maps)
library(ggplot2)
library(reshape2)
data <- read.csv("Forest_and_Carbon.csv")
# data for maps------------------------------------------
data_maps <- data[, -c(1:1)]
data_maps <- data_maps[, -c(2:2)]
data_maps <- data_maps[, -c(4:36)]
data_maps$Value2020 <- data_maps$F2020
data_maps$F2020 <- NULL
data_maps$DataType <- data_maps$Indicator
data_maps$Indicator <- NULL
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
world_data["ISO3"] <- data_maps$ISO3[match(world_data$region, data_maps$Country)]
df <- rbind(data_maps)
worldMaps <- function(df, world_data, data_type){
# Function for setting the aesthetics of the plot
my_theme <- function () {
theme_bw() + theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
strip.text = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
# Select only the data that the user has selected to view
plotdf <- df[ df$DataType == data_type,]
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Add the data the user wants to see to the geographical world data
world_data['DataType'] <- rep(data_type, nrow(world_data))
world_data['Value2020'] <- plotdf$Value2020[match(world_data$ISO3, plotdf$ISO3)]
# Create caption with the data source to show underneath the map
capt <- paste0("Source: ", ifelse(data_type == "Carbon stocks in forests", "United Nations" , "World Bank"))
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = world_data, color = 'gray70', size = 0.1,
aes(x = long, y = lat, fill = Value2020, group = group,
tooltip = sprintf("%s<br/>%s", ISO3, Value2020))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
scale_y_continuous(limits = c(-60, 90), breaks = c()) +
scale_x_continuous(breaks = c()) +
labs(fill = data_type, color = data_type, title = NULL, x = NULL, y = NULL, caption = capt) +
my_theme()
return(g)
}
library(shiny)
library(ggiraph)
# Define the UI
ui = fluidPage(
# App title
titlePanel("Childlessness and Gender Gap Index Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of data you want to see:",
choices = list("Carbon stocks in forests" = "Carbon stocks in forests","Forest area" = "Forest area","Index of carbon stocks in forests" = "Index of carbon stocks in forests")),
),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
girafeOutput("distPlot")
)
)
)
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type)))
})
}
# Finally, we can run our app by either clicking "Run App" in the top of our RStudio IDE, or by running
shinyApp(ui = ui, server = server)
library(tidyverse)
library(maps)
library(ggplot2)
library(reshape2)
data <- read.csv("Forest_and_Carbon.csv")
# data for maps------------------------------------------
data_maps <- data[, -c(1:1)]
data_maps <- data_maps[, -c(2:2)]
data_maps <- data_maps[, -c(4:36)]
data_maps$Value2020 <- data_maps$F2020
data_maps$F2020 <- NULL
data_maps$DataType <- data_maps$Indicator
data_maps$Indicator <- NULL
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
world_data["ISO3"] <- data_maps$ISO3[match(world_data$region, data_maps$Country)]
df <- rbind(data_maps)
worldMaps <- function(df, world_data, data_type){
# Function for setting the aesthetics of the plot
my_theme <- function () {
theme_bw() + theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
strip.text = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
# Select only the data that the user has selected to view
plotdf <- df[ df$DataType == data_type,]
plotdf <- plotdf[!is.na(plotdf$ISO3), ]
# Add the data the user wants to see to the geographical world data
world_data['DataType'] <- rep(data_type, nrow(world_data))
world_data['Value2020'] <- plotdf$Value2020[match(world_data$ISO3, plotdf$ISO3)]
# Create caption with the data source to show underneath the map
capt <- paste0("Source: ", ifelse(data_type == "Carbon stocks in forests", "United Nations" , "World Bank"))
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = world_data, color = 'gray70', size = 0.1,
aes(x = long, y = lat, fill = Value2020, group = group,
tooltip = sprintf("%s<br/>%s", ISO3, Value2020))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
scale_y_continuous(limits = c(-60, 90), breaks = c()) +
scale_x_continuous(breaks = c()) +
labs(fill = data_type, color = data_type, title = NULL, x = NULL, y = NULL, caption = capt) +
my_theme()
return(g)
}
library(shiny)
library(ggiraph)
# Define the UI
ui = fluidPage(
# App title
titlePanel("Forest and Carbon Data"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# First input: Type of data
selectInput(inputId = "data_type",
label = "Choose the type of data you want to see:",
choices = list("Carbon stocks in forests" = "Carbon stocks in forests","Forest area" = "Forest area","Index of carbon stocks in forests" = "Index of carbon stocks in forests")),
),
# Main panel for displaying outputs
mainPanel(
# Hide errors
tags$style(type = "text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"),
# Output: interactive world map
girafeOutput("distPlot")
)
)
)
# Define the server
server = function(input, output) {
# Create the interactive world map
output$distPlot <- renderGirafe({
ggiraph(code = print(worldMaps(df, world_data, input$data_type)))
})
}
# Finally, we can run our app by either clicking "Run App" in the top of our RStudio IDE, or by running
shinyApp(ui = ui, server = server)
library(shiny); runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
runApp('ShinyProject.R')
library(shiny); runApp('ShinyProject.R')
library(shiny); runApp('ShinyProject.R')
runApp('ShinyProject.R')
